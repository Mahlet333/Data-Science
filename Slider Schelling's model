import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button

# Define parameters
grid_size = 20  # Size of the grid
num_agents = 100  # Number of agents
num_iterations = 50  # Number of simulation iterations

# Initialize grid and agents
grid = np.zeros((grid_size, grid_size))
agent_positions = np.random.randint(0, grid_size, size=(num_agents, 2))
agent_colors = np.random.randint(0, 2, size=num_agents)

# Create interactive plot
fig, ax = plt.subplots()
plt.subplots_adjust(left=0.25, bottom=0.35)
plt.title("Interactive Simulation of Visual Attention")

# Plot initial grid
im = ax.imshow(grid, cmap='gray')

# Add slider for similarity threshold
ax_threshold = plt.axes([0.25, 0.2, 0.65, 0.03])
slider_threshold = Slider(ax_threshold, 'Threshold', 0, 1, valinit=0.5)

# Update function for slider
def update(val):
    update_simulation()

# Function to update simulation based on user input
def update_simulation():
    global grid
    similarity_threshold = slider_threshold.val
    grid = np.zeros((grid_size, grid_size))
    for _ in range(num_iterations):
        for agent_idx, (agent_row, agent_col) in enumerate(agent_positions):
            similar_neighbors = 0
            total_neighbors = 0
            for dr in [-1, 0, 1]:
                for dc in [-1, 0, 1]:
                    if dr == 0 and dc == 0:
                        continue  # Skip agent itself
                    neighbor_row = (agent_row + dr) % grid_size
                    neighbor_col = (agent_col + dc) % grid_size
                    if grid[neighbor_row, neighbor_col] == agent_colors[agent_idx]:
                        similar_neighbors += 1
                    total_neighbors += 1
            similarity_ratio = similar_neighbors / total_neighbors
            if similarity_ratio < similarity_threshold:
                empty_cells = np.argwhere(grid == 0)
                if len(empty_cells) > 0:
                    new_position = empty_cells[np.random.randint(len(empty_cells))]
                    grid[new_position[0], new_position[1]] = agent_colors[agent_idx]
                    grid[agent_row, agent_col] = 0
    im.set_array(grid)
    fig.canvas.draw_idle()

# Register callback function for slider
slider_threshold.on_changed(update)

# Add button for starting simulation
ax_button = plt.axes([0.8, 0.025, 0.1, 0.04])
button_start = Button(ax_button, 'Start')

# Function to start simulation
def start_simulation(event):
    update_simulation()

# Register callback function for button
button_start.on_clicked(start_simulation)

# Function for interpreting simulation results
def interpret_results():
    segregation_ratio = np.sum(grid == 1) / (grid_size * grid_size)
    if segregation_ratio > 0.5:
        return "The simulation resulted in high segregation."
    else:
        return "The simulation did not result in significant segregation."

# Add button for interpreting results
ax_button_interpret = plt.axes([0.25, 0.025, 0.1, 0.04])
button_interpret = Button(ax_button_interpret, 'Interpret')

# Function to interpret results
def interpret(event):
    interpretation = interpret_results()
    print(interpretation)

# Register callback function for interpretation button
button_interpret.on_clicked(interpret)

plt.show()
